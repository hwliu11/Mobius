//-----------------------------------------------------------------------------
// Created on: 07 December 2018
//-----------------------------------------------------------------------------
// Copyright (c) 2018-present, Sergey Slyadnev
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of Sergey Slyadnev nor the
//      names of all contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//-----------------------------------------------------------------------------

// Own include
#include <mobius/test_InsKnot.h>

// Geom includes
#include <mobius/geom_BSplineCurve.h>

// bspl includes
#include <mobius/bspl_InsKnot.h>
#include <mobius/bspl_FindSpan.h>

//-----------------------------------------------------------------------------

bool
  mobius::test_InsKnot::insertKnotCurve(const ptr<bcurve>&         curve,
                                        const double               u,
                                        const int                  r,
                                        const std::vector<double>& refKnots)
{
  /* ====================================================
   *  Prepare arguments for the knot insertion algorithm
   * ==================================================== */

  // Get properties of the input curve.
  const std::vector<double>& UP = curve->GetKnots();
  const int                  p  = curve->GetDegree();
  const std::vector<xyz>&    Pw = curve->GetPoles();
  const int                  np = int( Pw.size() ) - 1;

  // Find span the knot in question falls into.
  bspl_FindSpan FindSpan(UP, p);
  const int k = FindSpan(u);

  // Resolve multiplicity
  int s = 0;
  for ( size_t i = 0; i < UP.size(); ++i )
    if ( UP[i] == u )
      s++;

  // Output arguments.
  int nq = 0;
  std::vector<double> UQ;
  std::vector<xyz> Qw;

  /* ==================================
   *  Perform knot insertion algorithm
   * ================================== */

  bspl_InsKnot InsKnot;

  if ( !InsKnot(np, p, UP, Pw, u, k, s, r, nq, UQ, Qw) )
    return false;

  /* ===================
   *  Verify the result
   * =================== */

  if ( UQ != refKnots )
    return false;

  return true;
}

//-----------------------------------------------------------------------------

bool mobius::test_InsKnot::insertKnotSurface(const ptr<bsurf>&          surface,
                                             const double               knot,
                                             const bspl_ParamDirection  dir,
                                             const int                  r,
                                             const std::vector<double>& refKnots)
{
  /* ====================================================
   *  Prepare arguments for the knot insertion algorithm
   * ==================================================== */

  // Get properties of the input surface.
  const std::vector<double>&             UP = surface->GetKnots_U();
  const std::vector<double>&             VP = surface->GetKnots_V();
  const int                              p  = surface->GetDegree_U();
  const int                              q  = surface->GetDegree_V();
  const std::vector< std::vector<xyz> >& Pw = surface->GetPoles();
  const int                              np = int( Pw.size() ) - 1;
  const int                              mp = int( Pw[0].size() ) - 1;

  // Find span and resolve multiplicity.
  int k = -1, s = 0;
  if ( dir == ParamDirection_U )
  {
    // Span.
    bspl_FindSpan FindSpan(UP, p);
    k = FindSpan(knot);

    // Multiplicity.
    for ( size_t i = 0; i < UP.size(); ++i )
      if ( UP[i] == knot )
        s++;
  }
  else if ( dir == ParamDirection_V )
  {
    // Span.
    bspl_FindSpan FindSpan(VP, q);
    k = FindSpan(knot);

    // Multiplicity.
    for ( size_t i = 0; i < VP.size(); ++i )
      if ( VP[i] == knot )
        s++;
  }

  // Output arguments.
  int nq = 0, mq = 0;
  //
  std::vector<double> UQ, VQ;
  std::vector< std::vector<xyz> > Qw;

  /* ==================================
   *  Perform knot insertion algorithm
   * ================================== */

  bspl_InsKnot InsKnot;

  if ( !InsKnot(np, p, UP, mp, q, VP, Pw, dir, knot, k, s, r, nq, UQ, mq, VQ, Qw) )
    return false;

  /* ===================
   *  Verify the result
   * =================== */

  if ( (dir == ParamDirection_U) && (UQ != refKnots) )
    return false;

  if ( (dir == ParamDirection_V) && (VQ != refKnots) )
    return false;

  return true;
}

//-----------------------------------------------------------------------------

mobius::outcome mobius::test_InsKnot::test01(const int funcID)
{
  outcome res( DescriptionFn(), funcID );

  /* =====================
   *  Prepare input curve
   * ===================== */

  // JSON definition.
  std::string json =
  "{\
    entity: curve,\
    type: b-curve,\
    continuity: CN,\
    domain: {\
        U_min: 0,\
        U_max: 1\
    },\
    flags: {\
        is_rational: 0,\
        is_periodic: 0,\
        is_closed: 0\
    },\
    properties: {\
        degree: 3,\
        knots: [0, 0, 0, 0, 1, 1, 1, 1],\
        num_poles: 4,\
        poles: [[-1.7273331185814795e-016, -2.7903073454008515e-016, -1.9930766752863225e-016], [2.1356662204292287, 0.61293215795463996, 0.86133743282055253], [-0.10849860924114609, 2.748069190766909, 2.0868682935855745], [2, 3, 4]]\
    }\
  }";

  // Construct B-curve.
  ptr<bcurve> curve = bcurve::Instance(json);
  //
  if ( curve.IsNull() )
    return res.failure();

  /* ==================================
   *  Perform knot insertion algorithm
   * ================================== */

  // Knot value to insert.
  const double u = 0.5;

  // How many times to insert.
  const int r = 1;

  // Reference data
  const std::vector<double> refUQ = {0, 0, 0, 0, 0.5, 1, 1, 1, 1};

  if ( !insertKnotCurve(curve, u, r, refUQ) )
    return res.failure();

  return res.success();
}

//-----------------------------------------------------------------------------

mobius::outcome mobius::test_InsKnot::test02(const int funcID)
{
  outcome res( DescriptionFn(), funcID );

  /* =====================
   *  Prepare input curve
   * ===================== */

  // JSON definition.
  std::string json =
  "{\
    entity: curve,\
    type: b-curve,\
    continuity: CN,\
    domain: {\
        U_min: 0,\
        U_max: 1\
    },\
    flags: {\
        is_rational: 0,\
        is_periodic: 0,\
        is_closed: 0\
    },\
    properties: {\
        degree: 3,\
        knots: [0, 0, 0, 0, 1, 1, 1, 1],\
        num_poles: 4,\
        poles: [[-1.7273331185814795e-016, -2.7903073454008515e-016, -1.9930766752863225e-016], [2.1356662204292287, 0.61293215795463996, 0.86133743282055253], [-0.10849860924114609, 2.748069190766909, 2.0868682935855745], [2, 3, 4]]\
    }\
  }";

  // Construct B-curve.
  ptr<bcurve> curve = bcurve::Instance(json);
  //
  if ( curve.IsNull() )
    return res.failure();

  /* ==================================
   *  Perform knot insertion algorithm
   * ================================== */

  // Knot value to insert.
  const double u = 0.5;

  // How many times to insert.
  const int r = 2;

  // Reference data
  const std::vector<double> refUQ = {0, 0, 0, 0, 0.5, 0.5, 1, 1, 1, 1};

  if ( !insertKnotCurve(curve, u, r, refUQ) )
    return res.failure();

  return res.success();
}

//-----------------------------------------------------------------------------

mobius::outcome mobius::test_InsKnot::test03(const int funcID)
{
  outcome res( DescriptionFn(), funcID );

  /* =======================
   *  Prepare input surface
   * ======================= */

  // JSON definition.
  std::string json =\
  "{\
    entity: surface,\
    type: b-surface,\
    continuity: C2,\
    domain: {\
        U_min: 0,\
        U_max: 1,\
        V_min: 0,\
        V_max: 1\
    },\
    flags: {\
        is_U_rational: 0,\
        is_V_rational: 0,\
        is_U_periodic: 0,\
        is_V_periodic: 0,\
        is_U_closed: 0,\
        is_V_closed: 0\
    },\
    properties: {\
        U_degree: 3,\
        V_degree: 3,\
        U_knots: [0, 0, 0, 0, 0.14586638621970127, 0.2145640793417587, 0.28307649700999143, 0.34996357207739526, 0.41516162276667518, 0.47821415292419189, 0.54127862619453604, 0.60512428633496806, 0.67470436020123181, 0.74578847214124, 0.81993610554425811, 1, 1, 1, 1],\
        V_knots: [0, 0, 0, 0, 0.14690393242688526, 0.21591144963334422, 0.27704495964889098, 0.3376769446215917, 0.39825108338441551, 0.4583896064467492, 0.52236780332771982, 0.58777285300797455, 0.65458567968353609, 0.7187379588367051, 0.80067148846068914, 1, 1, 1, 1],\
        num_poles_in_U_axis: 15,\
        num_poles_in_V_axis: 15,\
        poles: {\
            u0: [[62.480551458144582, 179.59308573281325, 672.92900658560268], [64.317217499564052, 177.23078342228092, 670.17435680279425], [67.04648849676849, 173.73923792479147, 666.11982934937032], [70.730872244632806, 169.24404869700589, 661.09709386440318], [73.456489438060544, 166.15437307556587, 657.86827443651271], [76.205765087612718, 163.20781001261861, 654.96236681450307], [79.130113652253058, 160.28986095816941, 652.31800724649338], [82.221159974821148, 157.32645186673739, 649.77253449217142], [85.509793040640446, 154.29472882160101, 647.31447126139881], [88.981708802716454, 151.16180402245104, 644.85935709837008], [92.486942182661465, 148.02856022064697, 642.44211276052522], [96.305553390170232, 144.63308281091346, 639.84570037503988], [102.50306901565294, 139.1242458186187, 635.63579611045043], [107.54141936773664, 134.63791838675789, 632.19709406636912], [111.08691458693504, 131.45678236776106, 629.72750266643754]],\
            u1: [[63.696644326691001, 182.59652276387791, 670.8054348291605], [65.528119976522973, 180.2337860721652, 668.04388578237536], [68.283052335246495, 176.74438816071495, 664.02346837713196], [72.041026907032133, 172.25535771082488, 659.09855258686468], [74.859825125180436, 169.17348036102845, 655.99359288638016], [77.696251927222548, 166.23421093284341, 653.20352985850548], [80.700297017942304, 163.32293163933801, 650.66510591446024], [83.84618595210361, 160.36411229763306, 648.19253202492462], [87.18998064223149, 157.3370057002326, 645.80779170265635], [90.681603656665388, 154.20573019081405, 643.37887316166916], [94.203255243239525, 151.07386042020963, 640.98345252241165], [98.023468896131405, 147.67851711829931, 638.38917016767709], [104.23297359763245, 142.17068348556012, 634.19520223446159], [109.26027581522747, 137.68343144105208, 630.74181459392605], [112.80250429085561, 134.50202202998011, 628.26788091540959]],\
            u2: [[65.485528565981184, 187.01935960661012, 667.67551513978037], [67.345642867551575, 184.65901966881233, 664.95203366746273], [70.091478342952385, 181.16886044391333, 660.91952434230313], [74.082958373383505, 176.69937194478132, 656.30499280185086], [77.027082498297645, 173.62798305513724, 653.36662101660545], [80.0007177965295, 170.70019653485369, 650.75894068935929], [83.091407372260079, 167.79616847337175, 648.33568785795444], [86.316396559813185, 164.843968990859, 645.96825700426734], [89.698907457498635, 161.82010253279401, 643.63497972320022], [93.209415055240058, 158.69040746436022, 641.23116328156561], [96.738098886714411, 155.55912621868526, 638.84509016707295], [100.57090828163808, 152.16483704789448, 636.26755054702869], [106.77204925091898, 146.6563034587428, 632.06246522594938], [111.79916110445876, 142.16903548276571, 628.60882454634611], [115.34115417332147, 138.98760637062347, 626.13457795629097]],\
            u3: [[67.904173632790631, 192.86808069567635, 663.61276076657646], [69.798544510667014, 190.5106076729862, 660.93481442564257], [72.708007303179926, 187.03414233341334, 657.11980469284697], [76.97618928969051, 182.58781087751032, 652.87307581344623], [80.073527850790484, 179.52924442458695, 650.13836242707816], [83.177763987639594, 176.61238782076833, 647.70428165315184], [86.350587119790731, 173.71523347403567, 645.39020383821946], [89.637399285491966, 170.76820792450735, 643.1049504154405], [93.034370902796311, 167.74555167656911, 640.79089486750013], [96.565148997649914, 164.61755303552843, 638.41402273404822], [100.10447837781695, 161.48716271030335, 636.04210008380801], [103.93221075393043, 158.09244864644114, 633.45781189914794], [110.13246072472874, 152.58384049008757, 629.25154222933509], [115.14109605956334, 148.0950262238411, 625.77334186520818], [118.67834409327438, 144.91320000216729, 623.29278799572637]],\
            u4: [[69.691275710741337, 197.09210513567584, 660.7365357308696], [71.620662330082695, 194.73756256223291, 658.10513363223674], [74.692223654473025, 191.2746631647417, 654.50559137290247], [79.149415899825087, 186.8441498793961, 650.51010204797387], [82.342262303134021, 183.79357642826443, 647.90234128244629], [85.521780025763817, 180.88302010132483, 645.56832762756119], [88.739623550655367, 177.98963348791679, 643.31409261420004], [92.044143458921511, 175.04408989018214, 641.05237698973724], [95.458001893980182, 172.02284689126594, 638.7607680359431], [98.994619915828665, 168.89533699068667, 636.39165855339115], [102.53068879969564, 165.76467379621755, 634.01540192867355], [106.36400439303873, 162.3704269889094, 631.43853516662955], [112.54689858661972, 156.86036633656173, 627.20919554408954], [117.56899425799146, 152.37267855889891, 623.74888716622957], [121.09471256788834, 149.18988742061794, 621.25300755362457]],\
            u5: [[71.506127463688586, 201.25187894769059, 657.98300470566437], [73.518446409089023, 198.90427693761367, 655.46183937819308], [76.758191585647779, 195.45545275950354, 652.08585342922242], [81.35511482445699, 191.03663348854801, 648.27609980329203], [84.631120864347935, 187.99301962428189, 645.77887795862682], [87.861359260024869, 185.08670808417025, 643.51228413258116], [91.103226729212182, 182.1953320222037, 641.2899826507537], [94.428519203883667, 179.25152686978026, 639.05587870388672], [97.846172713164378, 176.23060147865738, 636.76931430567424], [101.38743541488202, 173.10348028892918, 634.40637870653359], [104.92595349624649, 169.97302206652731, 632.03337764736875], [108.74989485388342, 166.57799073429521, 629.44405029817494], [114.9474219302368, 161.06915470031663, 625.23416125451377], [119.93498376408989, 156.57857680370105, 621.72794919922592], [123.45887471163971, 153.39563273441172, 619.22964058776802]],\
            u6: [[73.346923162589064, 205.30707998653847, 655.40154519609678], [75.456474961894429, 202.96761534358737, 653.00962543997696], [78.838951494464737, 199.5307362786547, 649.82336338490734], [83.562144311634881, 195.12248444323782, 646.18145203804102], [86.901557671947401, 192.08417710474072, 643.76851359170337], [90.161895231630353, 189.18038454805762, 641.5419287080324], [93.42023820513684, 186.29038731250438, 639.3415270870421], [96.752066891229603, 183.34712917222586, 637.11611131855841], [100.17929397465781, 180.32700498855979, 634.84227247566002], [103.71983523845637, 177.19982342206529, 632.47837791406562], [107.25544315198827, 174.06912164922761, 630.10150855021664], [111.08070622383289, 170.67420093057103, 627.51393807332613], [117.2451944287812, 165.16259989057758, 623.26013251749907], [122.26189054537653, 160.67446022697598, 619.79264684807185], [125.77145365260883, 157.49031706816061, 617.27529313165667]],\
            u7: [[75.236428625634133, 209.29174980044704, 652.98099687099989], [77.439675725012478, 206.96012646857685, 650.71362043644854], [80.951054221658183, 203.53403514217834, 647.69869972667902], [85.768919629533656, 199.13370640678937, 644.18263075289599], [89.156623019963561, 196.09944043587299, 641.83388123326836], [92.42700306747318, 193.19648832978922, 639.62064520263323], [95.701706828122454, 190.30786032002877, 637.44199095608565], [99.041993003974056, 187.36530998268231, 635.22781720151204], [102.46383513512129, 184.34473513515212, 632.94682047723643], [106.00800715079268, 181.21785742439957, 630.58775204777032], [109.53843065715368, 178.08672177121372, 628.20399137465711], [113.35634222319324, 174.69118580884825, 625.60664899938206], [119.54055940478547, 169.18123587667992, 621.37906794233083], [124.51323334809739, 164.68941202022322, 617.85306634223662], [128.02259008433253, 161.50525159032574, 615.33543830971632]],\
            u8: [[77.190399348404284, 213.25588919114713, 650.67955440601543], [79.482004991560927, 210.93166053999005, 648.52962747557524], [83.103052053817663, 207.51474731898335, 645.66048235350672], [87.9939969943553, 203.12053457178916, 642.24155344682924], [91.405585938410681, 200.0882675704708, 639.92455350464706], [94.693264905049787, 197.18676320195911, 637.73431184882384], [97.973239114537023, 194.29857627332888, 635.56266328136462], [101.31628347252509, 191.35625676681565, 633.35215580636452], [104.74547804048053, 188.3362972409096, 631.08093221799857], [108.27858617173061, 185.20849359940627, 628.70715725667674], [111.81553212297091, 182.07790380625045, 626.33206646294218], [115.62401630227028, 178.68157887077714, 623.72219285016206], [121.79166458432206, 173.1702422959975, 619.47258778783146], [126.76843636814165, 168.67876138568815, 615.9520331916699], [130.27041202403959, 165.49398323700439, 613.4245939491833]],\
            u9: [[79.287141939825659, 217.36335002519314, 648.39855880499692], [81.665264209750646, 215.04636190567075, 646.36363303320979], [85.37537445834765, 211.63690233654651, 643.61287405268354], [90.318066870426193, 207.24702030841445, 640.26272983406966], [93.747725111685483, 204.21626551720959, 637.96974828224916], [97.043566753161116, 201.31544427872234, 635.79035676123726], [100.33076777325391, 198.42786215812475, 633.62831434260897], [103.67468630290277, 195.48561581058433, 631.41896884950245], [107.09523005640196, 192.46493230250212, 629.1362462727584], [110.63687961188853, 189.33784348836434, 626.77382489421393], [114.15237199266522, 186.20545825702058, 624.37021720664598], [117.97182879496231, 182.81005161467633, 621.77492881759883], [124.12211323889406, 177.29726186928789, 617.50224308769214], [129.09103100474908, 172.80512366028739, 613.97124863505462], [132.58067246793897, 169.61931326941152, 611.42741431909621]],\
            u10: [[81.54457332594302, 221.64517702306975, 646.12374406552522], [83.993045158655562, 219.33407642197889, 644.18232958207113], [87.785844227572582, 215.9315370373528, 641.54148369570476], [92.748315309012511, 211.54331027580324, 638.21763002930129], [96.194788267656165, 208.51396269957797, 635.94699923309713], [99.500452053151818, 205.61396347123068, 633.78066367583426], [102.78329028743745, 202.72601623135088, 631.61282207800048], [106.12892004882914, 199.78391309590802, 629.40575121857501], [109.55046507558056, 196.76331338386476, 627.12435957194634], [113.07640959151435, 193.63491022311035, 624.7410624633535], [116.60717977088476, 190.50380358280881, 622.3577626010607], [120.40881254780352, 187.10690525702313, 619.73878184620082], [126.54862887701739, 181.59323944054162, 615.45218150396465], [131.51028869718917, 177.10049381783037, 611.91153951657998], [134.9903273935401, 173.91387977637694, 609.3549408412847]],\
            u11: [[83.98121356904376, 226.14837070780354, 643.82114500094656], [86.50643085191642, 223.84369289364264, 641.98174346019755], [90.328552940761114, 220.44360753735032, 639.37987483627137], [95.321490819616514, 216.05793052627843, 636.09651878441991], [98.774795127007025, 213.02915466208759, 633.83496847424829], [102.07872360880604, 210.1290102070738, 631.66632628595835], [105.36998814281783, 207.2417681598491, 629.5096852430687], [108.70487887504655, 204.29876628062377, 627.2883396616312], [112.12905987993805, 201.27838717222428, 625.01045185642113], [115.6547483182657, 198.14996258046796, 622.62681435982961], [119.17151050257338, 195.01768361832296, 620.22489454293702], [122.96406794818193, 191.62002578276545, 617.59385051590846], [129.10223135078868, 186.10622163371377, 613.30505304137262], [134.03578682652181, 181.61112397298822, 609.72705370090887], [137.51250071496216, 178.42423168008526, 607.16603556571965]],\
            u12: [[87.757093160722803, 232.97493490908371, 640.44850892783495], [90.344583276407505, 230.67546867601158, 638.69188278175409], [94.215483708371977, 227.27946555396139, 636.15485216857053], [99.227139514904621, 222.89535503655216, 632.89637669113415], [102.68937196211233, 219.86732636375308, 630.64669400065623], [105.99903694466801, 216.96766199351313, 628.48567698521776], [109.28026656252911, 214.0795801293587, 626.31569715384978], [112.62142132457781, 211.13710248354164, 624.10267795676066], [116.02120488128818, 208.11468156535403, 621.79236014458456], [119.54932799722351, 204.98646073050392, 619.41195891316102], [123.04833441542566, 201.85269579750076, 616.98643746325035], [126.84999031857963, 198.45579940713722, 614.36748744865395], [132.931993392565, 192.93729522930326, 610.00403955023103], [137.88349112575921, 188.44369914680175, 606.44988973411398], [141.32655440641395, 185.25399065198113, 603.84414194372323]],\
            u13: [[90.785755383573161, 238.31619883682606, 637.91649309178729], [93.394896703119173, 236.01854458177831, 636.18864654129675], [97.279317054757087, 232.62367293479653, 633.66958711452469], [102.29912678166019, 228.24024481475391, 630.42195013513322], [105.75878834228514, 225.21200098579047, 628.16885012538739], [109.05986583107955, 222.31161793265005, 625.99641828981976], [112.34017984447405, 219.42345944203311, 623.82522140251319], [115.65918196811879, 216.47912785339341, 621.58275608415602], [119.08498868279067, 213.45888479980289, 619.3070292336123], [122.58164101733202, 210.32803019157663, 616.88479585432344], [126.09401031345001, 207.19538359089591, 614.47703684500675], [129.84515274908676, 203.79425975462937, 611.79094242696704], [135.96928530728385, 198.2792813714826, 607.48349462562157], [140.83451066196145, 193.77846519835819, 603.81466831482805], [144.29761270438041, 190.59043373711879, 601.23555680126515]],\
            u14: [[92.94233193702668, 242.10042723092349, 636.13811021161246], [95.561920411489851, 239.80364729285392, 634.42415041289416], [99.453566608437569, 236.40938037311847, 631.9146958518445], [104.47245803928998, 232.02587540135636, 628.66583823875953], [107.92913964626121, 228.99738218161608, 626.40877716238526], [111.2310379114887, 226.09706781883031, 624.23743633376694], [114.50420999309833, 223.20831162364524, 622.05674612175403], [117.83244229617613, 220.26475250393668, 619.82654990552226], [121.23231276266567, 217.24233885918386, 617.51634761709533], [124.738447303109, 214.11227781185249, 615.10671834300638], [128.2262618779759, 210.97757623928342, 612.66632027343087], [131.99137335650968, 207.57762146497259, 609.99879403330874], [138.07148814740987, 202.05895925770594, 605.63283615789226], [142.95882995175077, 197.55999399878513, 601.99340786493224], [146.39227476974759, 194.36948053981192, 599.37487485172937]]\
        }\
    }\
  }";

  // Construct B-surface.
  core_Ptr<bsurf> surf = bsurf::Instance(json);
  //
  if ( surf.IsNull() )
    return res.failure();

  /* ==================================
   *  Perform knot insertion algorithm
   * ================================== */

  // Knot value to insert.
  const double knot = 0.5;

  // Parametric direction.
  const bspl_ParamDirection dir = ParamDirection_U;

  // How many times to insert.
  const int r = 1;

  // Reference data
  const std::vector<double>
    refKnots = {0, 0, 0, 0,
                0.14586638621970127,
                0.2145640793417587,
                0.28307649700999143,
                0.34996357207739526,
                0.41516162276667518,
                0.47821415292419189,
                0.5,
                0.54127862619453604,
                0.60512428633496806,
                0.67470436020123181,
                0.74578847214124,
                0.81993610554425811,
                1, 1, 1, 1};

  if ( !insertKnotSurface(surf, knot, dir, r, refKnots) )
    return res.failure();

  return res.success();
}

//-----------------------------------------------------------------------------

mobius::outcome mobius::test_InsKnot::test04(const int funcID)
{
  outcome res( DescriptionFn(), funcID );

  /* =======================
   *  Prepare input surface
   * ======================= */

  // JSON definition.
  std::string json =\
  "{\
    entity: surface,\
    type: b-surface,\
    continuity: C2,\
    domain: {\
        U_min: 0,\
        U_max: 1,\
        V_min: 0,\
        V_max: 1\
    },\
    flags: {\
        is_U_rational: 0,\
        is_V_rational: 0,\
        is_U_periodic: 0,\
        is_V_periodic: 0,\
        is_U_closed: 0,\
        is_V_closed: 0\
    },\
    properties: {\
        U_degree: 3,\
        V_degree: 3,\
        U_knots: [0, 0, 0, 0, 0.14586638621970127, 0.2145640793417587, 0.28307649700999143, 0.34996357207739526, 0.41516162276667518, 0.47821415292419189, 0.54127862619453604, 0.60512428633496806, 0.67470436020123181, 0.74578847214124, 0.81993610554425811, 1, 1, 1, 1],\
        V_knots: [0, 0, 0, 0, 0.14690393242688526, 0.21591144963334422, 0.27704495964889098, 0.3376769446215917, 0.39825108338441551, 0.4583896064467492, 0.52236780332771982, 0.58777285300797455, 0.65458567968353609, 0.7187379588367051, 0.80067148846068914, 1, 1, 1, 1],\
        num_poles_in_U_axis: 15,\
        num_poles_in_V_axis: 15,\
        poles: {\
            u0: [[62.480551458144582, 179.59308573281325, 672.92900658560268], [64.317217499564052, 177.23078342228092, 670.17435680279425], [67.04648849676849, 173.73923792479147, 666.11982934937032], [70.730872244632806, 169.24404869700589, 661.09709386440318], [73.456489438060544, 166.15437307556587, 657.86827443651271], [76.205765087612718, 163.20781001261861, 654.96236681450307], [79.130113652253058, 160.28986095816941, 652.31800724649338], [82.221159974821148, 157.32645186673739, 649.77253449217142], [85.509793040640446, 154.29472882160101, 647.31447126139881], [88.981708802716454, 151.16180402245104, 644.85935709837008], [92.486942182661465, 148.02856022064697, 642.44211276052522], [96.305553390170232, 144.63308281091346, 639.84570037503988], [102.50306901565294, 139.1242458186187, 635.63579611045043], [107.54141936773664, 134.63791838675789, 632.19709406636912], [111.08691458693504, 131.45678236776106, 629.72750266643754]],\
            u1: [[63.696644326691001, 182.59652276387791, 670.8054348291605], [65.528119976522973, 180.2337860721652, 668.04388578237536], [68.283052335246495, 176.74438816071495, 664.02346837713196], [72.041026907032133, 172.25535771082488, 659.09855258686468], [74.859825125180436, 169.17348036102845, 655.99359288638016], [77.696251927222548, 166.23421093284341, 653.20352985850548], [80.700297017942304, 163.32293163933801, 650.66510591446024], [83.84618595210361, 160.36411229763306, 648.19253202492462], [87.18998064223149, 157.3370057002326, 645.80779170265635], [90.681603656665388, 154.20573019081405, 643.37887316166916], [94.203255243239525, 151.07386042020963, 640.98345252241165], [98.023468896131405, 147.67851711829931, 638.38917016767709], [104.23297359763245, 142.17068348556012, 634.19520223446159], [109.26027581522747, 137.68343144105208, 630.74181459392605], [112.80250429085561, 134.50202202998011, 628.26788091540959]],\
            u2: [[65.485528565981184, 187.01935960661012, 667.67551513978037], [67.345642867551575, 184.65901966881233, 664.95203366746273], [70.091478342952385, 181.16886044391333, 660.91952434230313], [74.082958373383505, 176.69937194478132, 656.30499280185086], [77.027082498297645, 173.62798305513724, 653.36662101660545], [80.0007177965295, 170.70019653485369, 650.75894068935929], [83.091407372260079, 167.79616847337175, 648.33568785795444], [86.316396559813185, 164.843968990859, 645.96825700426734], [89.698907457498635, 161.82010253279401, 643.63497972320022], [93.209415055240058, 158.69040746436022, 641.23116328156561], [96.738098886714411, 155.55912621868526, 638.84509016707295], [100.57090828163808, 152.16483704789448, 636.26755054702869], [106.77204925091898, 146.6563034587428, 632.06246522594938], [111.79916110445876, 142.16903548276571, 628.60882454634611], [115.34115417332147, 138.98760637062347, 626.13457795629097]],\
            u3: [[67.904173632790631, 192.86808069567635, 663.61276076657646], [69.798544510667014, 190.5106076729862, 660.93481442564257], [72.708007303179926, 187.03414233341334, 657.11980469284697], [76.97618928969051, 182.58781087751032, 652.87307581344623], [80.073527850790484, 179.52924442458695, 650.13836242707816], [83.177763987639594, 176.61238782076833, 647.70428165315184], [86.350587119790731, 173.71523347403567, 645.39020383821946], [89.637399285491966, 170.76820792450735, 643.1049504154405], [93.034370902796311, 167.74555167656911, 640.79089486750013], [96.565148997649914, 164.61755303552843, 638.41402273404822], [100.10447837781695, 161.48716271030335, 636.04210008380801], [103.93221075393043, 158.09244864644114, 633.45781189914794], [110.13246072472874, 152.58384049008757, 629.25154222933509], [115.14109605956334, 148.0950262238411, 625.77334186520818], [118.67834409327438, 144.91320000216729, 623.29278799572637]],\
            u4: [[69.691275710741337, 197.09210513567584, 660.7365357308696], [71.620662330082695, 194.73756256223291, 658.10513363223674], [74.692223654473025, 191.2746631647417, 654.50559137290247], [79.149415899825087, 186.8441498793961, 650.51010204797387], [82.342262303134021, 183.79357642826443, 647.90234128244629], [85.521780025763817, 180.88302010132483, 645.56832762756119], [88.739623550655367, 177.98963348791679, 643.31409261420004], [92.044143458921511, 175.04408989018214, 641.05237698973724], [95.458001893980182, 172.02284689126594, 638.7607680359431], [98.994619915828665, 168.89533699068667, 636.39165855339115], [102.53068879969564, 165.76467379621755, 634.01540192867355], [106.36400439303873, 162.3704269889094, 631.43853516662955], [112.54689858661972, 156.86036633656173, 627.20919554408954], [117.56899425799146, 152.37267855889891, 623.74888716622957], [121.09471256788834, 149.18988742061794, 621.25300755362457]],\
            u5: [[71.506127463688586, 201.25187894769059, 657.98300470566437], [73.518446409089023, 198.90427693761367, 655.46183937819308], [76.758191585647779, 195.45545275950354, 652.08585342922242], [81.35511482445699, 191.03663348854801, 648.27609980329203], [84.631120864347935, 187.99301962428189, 645.77887795862682], [87.861359260024869, 185.08670808417025, 643.51228413258116], [91.103226729212182, 182.1953320222037, 641.2899826507537], [94.428519203883667, 179.25152686978026, 639.05587870388672], [97.846172713164378, 176.23060147865738, 636.76931430567424], [101.38743541488202, 173.10348028892918, 634.40637870653359], [104.92595349624649, 169.97302206652731, 632.03337764736875], [108.74989485388342, 166.57799073429521, 629.44405029817494], [114.9474219302368, 161.06915470031663, 625.23416125451377], [119.93498376408989, 156.57857680370105, 621.72794919922592], [123.45887471163971, 153.39563273441172, 619.22964058776802]],\
            u6: [[73.346923162589064, 205.30707998653847, 655.40154519609678], [75.456474961894429, 202.96761534358737, 653.00962543997696], [78.838951494464737, 199.5307362786547, 649.82336338490734], [83.562144311634881, 195.12248444323782, 646.18145203804102], [86.901557671947401, 192.08417710474072, 643.76851359170337], [90.161895231630353, 189.18038454805762, 641.5419287080324], [93.42023820513684, 186.29038731250438, 639.3415270870421], [96.752066891229603, 183.34712917222586, 637.11611131855841], [100.17929397465781, 180.32700498855979, 634.84227247566002], [103.71983523845637, 177.19982342206529, 632.47837791406562], [107.25544315198827, 174.06912164922761, 630.10150855021664], [111.08070622383289, 170.67420093057103, 627.51393807332613], [117.2451944287812, 165.16259989057758, 623.26013251749907], [122.26189054537653, 160.67446022697598, 619.79264684807185], [125.77145365260883, 157.49031706816061, 617.27529313165667]],\
            u7: [[75.236428625634133, 209.29174980044704, 652.98099687099989], [77.439675725012478, 206.96012646857685, 650.71362043644854], [80.951054221658183, 203.53403514217834, 647.69869972667902], [85.768919629533656, 199.13370640678937, 644.18263075289599], [89.156623019963561, 196.09944043587299, 641.83388123326836], [92.42700306747318, 193.19648832978922, 639.62064520263323], [95.701706828122454, 190.30786032002877, 637.44199095608565], [99.041993003974056, 187.36530998268231, 635.22781720151204], [102.46383513512129, 184.34473513515212, 632.94682047723643], [106.00800715079268, 181.21785742439957, 630.58775204777032], [109.53843065715368, 178.08672177121372, 628.20399137465711], [113.35634222319324, 174.69118580884825, 625.60664899938206], [119.54055940478547, 169.18123587667992, 621.37906794233083], [124.51323334809739, 164.68941202022322, 617.85306634223662], [128.02259008433253, 161.50525159032574, 615.33543830971632]],\
            u8: [[77.190399348404284, 213.25588919114713, 650.67955440601543], [79.482004991560927, 210.93166053999005, 648.52962747557524], [83.103052053817663, 207.51474731898335, 645.66048235350672], [87.9939969943553, 203.12053457178916, 642.24155344682924], [91.405585938410681, 200.0882675704708, 639.92455350464706], [94.693264905049787, 197.18676320195911, 637.73431184882384], [97.973239114537023, 194.29857627332888, 635.56266328136462], [101.31628347252509, 191.35625676681565, 633.35215580636452], [104.74547804048053, 188.3362972409096, 631.08093221799857], [108.27858617173061, 185.20849359940627, 628.70715725667674], [111.81553212297091, 182.07790380625045, 626.33206646294218], [115.62401630227028, 178.68157887077714, 623.72219285016206], [121.79166458432206, 173.1702422959975, 619.47258778783146], [126.76843636814165, 168.67876138568815, 615.9520331916699], [130.27041202403959, 165.49398323700439, 613.4245939491833]],\
            u9: [[79.287141939825659, 217.36335002519314, 648.39855880499692], [81.665264209750646, 215.04636190567075, 646.36363303320979], [85.37537445834765, 211.63690233654651, 643.61287405268354], [90.318066870426193, 207.24702030841445, 640.26272983406966], [93.747725111685483, 204.21626551720959, 637.96974828224916], [97.043566753161116, 201.31544427872234, 635.79035676123726], [100.33076777325391, 198.42786215812475, 633.62831434260897], [103.67468630290277, 195.48561581058433, 631.41896884950245], [107.09523005640196, 192.46493230250212, 629.1362462727584], [110.63687961188853, 189.33784348836434, 626.77382489421393], [114.15237199266522, 186.20545825702058, 624.37021720664598], [117.97182879496231, 182.81005161467633, 621.77492881759883], [124.12211323889406, 177.29726186928789, 617.50224308769214], [129.09103100474908, 172.80512366028739, 613.97124863505462], [132.58067246793897, 169.61931326941152, 611.42741431909621]],\
            u10: [[81.54457332594302, 221.64517702306975, 646.12374406552522], [83.993045158655562, 219.33407642197889, 644.18232958207113], [87.785844227572582, 215.9315370373528, 641.54148369570476], [92.748315309012511, 211.54331027580324, 638.21763002930129], [96.194788267656165, 208.51396269957797, 635.94699923309713], [99.500452053151818, 205.61396347123068, 633.78066367583426], [102.78329028743745, 202.72601623135088, 631.61282207800048], [106.12892004882914, 199.78391309590802, 629.40575121857501], [109.55046507558056, 196.76331338386476, 627.12435957194634], [113.07640959151435, 193.63491022311035, 624.7410624633535], [116.60717977088476, 190.50380358280881, 622.3577626010607], [120.40881254780352, 187.10690525702313, 619.73878184620082], [126.54862887701739, 181.59323944054162, 615.45218150396465], [131.51028869718917, 177.10049381783037, 611.91153951657998], [134.9903273935401, 173.91387977637694, 609.3549408412847]],\
            u11: [[83.98121356904376, 226.14837070780354, 643.82114500094656], [86.50643085191642, 223.84369289364264, 641.98174346019755], [90.328552940761114, 220.44360753735032, 639.37987483627137], [95.321490819616514, 216.05793052627843, 636.09651878441991], [98.774795127007025, 213.02915466208759, 633.83496847424829], [102.07872360880604, 210.1290102070738, 631.66632628595835], [105.36998814281783, 207.2417681598491, 629.5096852430687], [108.70487887504655, 204.29876628062377, 627.2883396616312], [112.12905987993805, 201.27838717222428, 625.01045185642113], [115.6547483182657, 198.14996258046796, 622.62681435982961], [119.17151050257338, 195.01768361832296, 620.22489454293702], [122.96406794818193, 191.62002578276545, 617.59385051590846], [129.10223135078868, 186.10622163371377, 613.30505304137262], [134.03578682652181, 181.61112397298822, 609.72705370090887], [137.51250071496216, 178.42423168008526, 607.16603556571965]],\
            u12: [[87.757093160722803, 232.97493490908371, 640.44850892783495], [90.344583276407505, 230.67546867601158, 638.69188278175409], [94.215483708371977, 227.27946555396139, 636.15485216857053], [99.227139514904621, 222.89535503655216, 632.89637669113415], [102.68937196211233, 219.86732636375308, 630.64669400065623], [105.99903694466801, 216.96766199351313, 628.48567698521776], [109.28026656252911, 214.0795801293587, 626.31569715384978], [112.62142132457781, 211.13710248354164, 624.10267795676066], [116.02120488128818, 208.11468156535403, 621.79236014458456], [119.54932799722351, 204.98646073050392, 619.41195891316102], [123.04833441542566, 201.85269579750076, 616.98643746325035], [126.84999031857963, 198.45579940713722, 614.36748744865395], [132.931993392565, 192.93729522930326, 610.00403955023103], [137.88349112575921, 188.44369914680175, 606.44988973411398], [141.32655440641395, 185.25399065198113, 603.84414194372323]],\
            u13: [[90.785755383573161, 238.31619883682606, 637.91649309178729], [93.394896703119173, 236.01854458177831, 636.18864654129675], [97.279317054757087, 232.62367293479653, 633.66958711452469], [102.29912678166019, 228.24024481475391, 630.42195013513322], [105.75878834228514, 225.21200098579047, 628.16885012538739], [109.05986583107955, 222.31161793265005, 625.99641828981976], [112.34017984447405, 219.42345944203311, 623.82522140251319], [115.65918196811879, 216.47912785339341, 621.58275608415602], [119.08498868279067, 213.45888479980289, 619.3070292336123], [122.58164101733202, 210.32803019157663, 616.88479585432344], [126.09401031345001, 207.19538359089591, 614.47703684500675], [129.84515274908676, 203.79425975462937, 611.79094242696704], [135.96928530728385, 198.2792813714826, 607.48349462562157], [140.83451066196145, 193.77846519835819, 603.81466831482805], [144.29761270438041, 190.59043373711879, 601.23555680126515]],\
            u14: [[92.94233193702668, 242.10042723092349, 636.13811021161246], [95.561920411489851, 239.80364729285392, 634.42415041289416], [99.453566608437569, 236.40938037311847, 631.9146958518445], [104.47245803928998, 232.02587540135636, 628.66583823875953], [107.92913964626121, 228.99738218161608, 626.40877716238526], [111.2310379114887, 226.09706781883031, 624.23743633376694], [114.50420999309833, 223.20831162364524, 622.05674612175403], [117.83244229617613, 220.26475250393668, 619.82654990552226], [121.23231276266567, 217.24233885918386, 617.51634761709533], [124.738447303109, 214.11227781185249, 615.10671834300638], [128.2262618779759, 210.97757623928342, 612.66632027343087], [131.99137335650968, 207.57762146497259, 609.99879403330874], [138.07148814740987, 202.05895925770594, 605.63283615789226], [142.95882995175077, 197.55999399878513, 601.99340786493224], [146.39227476974759, 194.36948053981192, 599.37487485172937]]\
        }\
    }\
  }";

  // Construct B-surface.
  core_Ptr<bsurf> surf = bsurf::Instance(json);
  //
  if ( surf.IsNull() )
    return res.failure();

  /* ==================================
   *  Perform knot insertion algorithm
   * ================================== */

  // Knot value to insert.
  const double knot = 0.5;

  // Parametric direction.
  const bspl_ParamDirection dir = ParamDirection_V;

  // How many times to insert.
  const int r = 1;

  // Reference data
  const std::vector<double>
    refKnots = {0, 0, 0, 0,
                0.14690393242688526,
                0.21591144963334422,
                0.27704495964889098,
                0.3376769446215917,
                0.39825108338441551,
                0.4583896064467492,
                0.5,
                0.52236780332771982,
                0.58777285300797455,
                0.65458567968353609,
                0.7187379588367051,
                0.80067148846068914,
                1, 1, 1, 1};

  if ( !insertKnotSurface(surf, knot, dir, r, refKnots) )
    return res.failure();

  return res.success();
}
